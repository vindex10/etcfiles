diff --git a/src/Plugins/Monitors/Net.hs b/src/Plugins/Monitors/Net.hs
index 5954a77..f87ea0c 100644
--- a/src/Plugins/Monitors/Net.hs
+++ b/src/Plugins/Monitors/Net.hs
@@ -29,15 +29,27 @@ import System.Console.GetOpt
 
 import qualified Data.ByteString.Lazy.Char8 as B
 
+type DevList = [String]
+
+parseDevList :: String -> DevList
+parseDevList = splitOnComma
+  where splitOnComma [] = [[]]
+        splitOnComma (',':xs) = [] : splitOnComma xs
+        splitOnComma (x:xs) =
+           let rest = splitOnComma xs
+           in (x : head rest) : tail rest
+
 data NetOpts = NetOpts
   { rxIconPattern :: Maybe IconPattern
   , txIconPattern :: Maybe IconPattern
+  , onlyDevList :: Maybe DevList
   }
 
 defaultOpts :: NetOpts
 defaultOpts = NetOpts
   { rxIconPattern = Nothing
   , txIconPattern = Nothing
+  , onlyDevList = Nothing
   }
 
 options :: [OptDescr (NetOpts -> NetOpts)]
@@ -46,6 +58,8 @@ options =
      o { rxIconPattern = Just $ parseIconPattern x }) "") ""
   , Option "" ["tx-icon-pattern"] (ReqArg (\x o ->
      o { txIconPattern = Just $ parseIconPattern x }) "") ""
+  , Option "" ["devices"] (ReqArg (\x o ->
+     o { onlyDevList = Just $ parseDevList x }) "") ""
   ]
 
 parseOpts :: [String] -> IO NetOpts
@@ -181,10 +195,16 @@ parseNets = mapM $ uncurry parseNet
 
 runNets :: [(NetDevRef, String)] -> [String] -> Monitor String
 runNets refs argv = do
-  dev <- io $ parseActive refs
   opts <- io $ parseOpts argv
+  dev <- io $ parseActive $ filterRefs opts refs
   printNet opts dev
-    where parseActive refs' = liftM selectActive (parseNets refs') 
+    where parseActive refs' = liftM selectActive (parseNets refs')
+          refInDevList opts' (_, refname') = case onlyDevList opts' of
+            Just theList -> refname' `elem` theList
+            Nothing -> True
+          filterRefs opts' refs' = case filter (refInDevList opts') refs' of
+            [] -> refs'
+            xs -> xs
           selectActive = maximum
 
 startNet :: String -> [String] -> Int -> (String -> IO ()) -> IO ()
